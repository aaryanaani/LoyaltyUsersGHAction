name: Build and Deploy.

on:
  push:
    branches:
      - demo

env:
  SERVICE_NAME: loyaltyusers
  DOCKER_CONTEXT: ${{ github.workspace }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT }}
  DOCKER_REPO: ${{ vars.AWS_ACCOUNT }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  DOCKER_URL: https://${{ vars.AWS_ACCOUNT }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/loyaltyusers
  CLUSTER_NAME: LoyaltyServices
  ENVIRONMENT: develop
  TASK_FAMILY: loyaltyusers
  JAVA_HOME: /usr/lib/jvm/java-17-amazon-corretto
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  LOYALTY_REGION: nora,emea

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Make gradlew executable      
        run: chmod +x ./gradlew
        
      - name: Build with Gradle
        run: ./gradlew -Plabel=${{ steps.read_from_file.outputs.version }} clean labelBuild build

  deploy_dev:
    environment: develop
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # - name: Clean up
      #   run:  |
      #     docker container prune --force
      #     docker image prune --force
      #     docker volume prune --force

      # - name:  AWS ECR Login
      #   run: |
      #     echo "${{ secrets.AWS_ACCESS_KEY_ID }}" | docker login --username AWS --password-stdin "${{ vars.AWS_ACCOUNT }}.dkr.ecr.us-east-2.amazonaws.com"


      # - name: Create Image and Push to ECR
      #   run: |
      #     docker build --rm --pull --no-cache -t ${{ env.SERVICE_NAME }} ${{ env.DOCKER_CONTEXT }}
      #     docker tag ${{ env.SERVICE_NAME }}:latest ${{ env.DOCKER_REPO }}/${{ env.SERVICE_NAME }}:${{ env.DEV_VERSION }}
      #     docker push ${{ env.DOCKER_REPO }}/${{ env.SERVICE_NAME }}:${{ env.DEV_VERSION }}
