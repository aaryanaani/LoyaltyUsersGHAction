plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
	id 'project-report'
	id 'jacoco'
	id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.skechers.loyalty.users'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

//label = "${label}"!=null?"${label}":"Unversioned"

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }

}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
		
	//This is required to enable log4j2
	all {
		exclude group:'org.springframework.boot', module:'spring-boot-starter-logging'
	}
}
jar {
	enabled = false
}
repositories {
	mavenCentral()
}

ext {
	//set('springCloudVersion', "Greenwich.SR3")
	set('springCloudVersion', "2021.0.4")
	
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	//implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config:2.2.6.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws-messaging:2.2.6.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'
	implementation 'org.apache.httpcomponents:httpclient:4.5.9'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.4'
	//Swagger UI
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.7.4'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.11'
	
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'com.google.code.gson:gson:2.9.0'
	implementation 'commons-codec:commons-codec:1.9'
	implementation "com.google.guava:guava:31.0.1-jre"
	implementation "org.everit.json:org.everit.json.schema:1.3.0"
	implementation "ch.qos.logback:logback-classic:1.2.9"
	implementation "org.codehaus.janino:janino:3.1.6"
	
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	//runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	// required if you want to use Mockito for unit tests
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.mockito:mockito-core:2.21.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.23.0'
   	
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.8.1'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.7.0'
    testImplementation 'org.everit.json:org.everit.json.schema:1.3.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test 
	{
		  useJUnitPlatform{
		  	excludeTags "integration"
		  	includeTags "unit"
		  }
		  
	}
	
task integrationTest(type: Test) {
    useJUnitPlatform {
        group = "Integration Testing"
        description = "Starts Integration Tests"
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = false
        }
    }

}
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.enabled true
		csv.enabled false
		
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				"com/skechers/loyalty/**/*Application.class",
				"com/skechers/loyalty/**/model/*.class",
				"com/skechers/loyalty/**/logging/*.class"
			])
		}))
	}
}

task labelBuild() {
	doLast {
		Properties props = new Properties()
		props.setProperty("version", "${label}")
		File propertiesFile = new File("$projectDir/src/main/resources/version.properties")
		props.store(propertiesFile.newWriter(), null)
	}
}

sonar {
  properties {
	property "sonar.verbose", "true"
    property "sonar.projectKey", "skechers_LoyaltyUsersGHAction_AY0eWO_jThIGLystOC96"
  }
}